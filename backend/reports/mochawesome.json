{
  "reportTitle": "backend",
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 10,
    "pending": 1,
    "failures": 0,
    "start": "2016-01-05T00:51:41.301Z",
    "end": "2016-01-05T00:51:42.273Z",
    "duration": 972,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 9.1,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "ad40220d-060d-405b-8966-70bf294e903f",
            "parentUUID": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "ad40220d-060d-405b-8966-70bf294e903f",
            "parentUUID": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0c5f5baa-990e-45b7-9912-6cc48ee3edfc",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "is not implemented yet",
      "fullTitle": "Game lifecycle is not implemented yet",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "26c97cda-87b1-4c37-ad81-df01dfa021b2",
      "parentUUID": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
      "skipped": false
    },
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "5d675cb5-e26c-481e-8bd9-f8ee68d2b1e0",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "d9437a88-8de3-4db0-9856-33ae83e48ea7",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "a72f255f-9410-45e9-b1f0-c4b3c3979643",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "9e33cd1c-9ab1-41e5-887e-a14ab2c34985",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "18c42075-5f72-43d4-ab54-a7dffc6f64e9",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "c2168cd8-5427-4381-ac9c-0ac9a41d2c80",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "b1e585be-fd95-44b9-8e95-80f0a598ed47",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "71c601a0-afbc-41a9-90d9-92bbfcd4ac29",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "5515698d-bd2d-460a-843f-4091ba5bfac5",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "4337b30a-dfd9-4dc9-b2a5-cd2eeee5a346",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given a non-existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "11312217-7f10-4110-9865-f827a405e99c",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "11312217-7f10-4110-9865-f827a405e99c",
            "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 311
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1257,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1257,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 806,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 80,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.2]",
        "test": "[Circular ~.allHooks.2]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.4]",
        "test": "[Circular ~.allHooks.4]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 101
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1698,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 33,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.6]",
        "test": "[Circular ~.allHooks.6]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 101
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1698,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 33,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.8]",
        "test": "[Circular ~.allHooks.8]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 101
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1698,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 33,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.10]",
        "test": "[Circular ~.allHooks.10]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 101
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1698,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 33,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.12]",
        "test": "[Circular ~.allHooks.12]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 101
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1698,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 33,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.14]",
        "test": "[Circular ~.allHooks.14]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "6c534df5-4876-493e-ab7f-779976212799",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
            "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 101
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1731,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1698,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 33,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "b3825815-4a97-4c5c-8566-454acbb133b5",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4d7c3f55-c7ee-49dd-b9b1-68791f2f0a4d",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4b654e6b-11ff-4fbb-8e0c-28b6615bff64",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "11312217-7f10-4110-9865-f827a405e99c",
                "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 311
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "3f7cd179-682b-41f7-95e8-b200f4cda117",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "6c534df5-4876-493e-ab7f-779976212799",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "4f142b91-e32b-40d4-992c-3da54c833ac0",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "90bc9e44-2242-431e-bf91-2aa56b4d422d",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2480c5c0-68de-49cc-96df-be4b975e47b5",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "cb87f9fb-ec25-4015-b5d1-6bb47fcc4efa",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b690152c-bff7-4ed9-b040-de02426882ee",
                "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0a3bf9ac-5fac-4f16-845c-6fe1b42c4173",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.16]",
        "test": "[Circular ~.allHooks.16]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 17,
      "_error": null
    }
  ],
  "allPending": [
    {
      "title": "is not implemented yet",
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "pending": true,
      "type": "test",
      "file": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
      "parent": {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "ad40220d-060d-405b-8966-70bf294e903f",
            "parentUUID": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "ad40220d-060d-405b-8966-70bf294e903f",
            "parentUUID": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "b1f5828c-09a6-42b0-8a0d-1e4d3d3f8554",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {}
    }
  ],
  "allPasses": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "d7b8ef39-1a6e-4b84-8d8a-95a34eeb9d3b",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "e6eada85-26de-48ec-af28-0cdc3da46f69",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "27bf0b25-5f58-4b82-a25e-3f71659e4af0",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "deac0113-4616-46a0-976e-187a01857d19",
      "parentUUID": "fb737391-ea77-4dc8-8138-ca4f1267ac8f",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "3f15645e-ce12-4f4a-b815-1def76ab04b9",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "8d6d7777-8003-4d20-a337-20e01da93f86",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "ba39b459-09c7-4f82-ba51-cf2d8df63860",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "4bfef2ba-fbd8-46c2-b313-b0ce4086b03f",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "d1b84881-bb2c-48f8-898b-601b3708b114",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "9d8f5831-99e7-4c41-8c97-0d89f2365c8d",
      "parentUUID": "3f7cd179-682b-41f7-95e8-b200f4cda117",
      "skipped": false
    }
  ],
  "allFailures": []
}