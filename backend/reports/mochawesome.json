{
  "reportTitle": "backend",
  "inlineAssets": false,
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 10,
    "pending": 1,
    "failures": 0,
    "start": "2016-01-26T15:05:55.421Z",
    "end": "2016-01-26T15:05:56.161Z",
    "duration": 740,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 9.1,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "b2be11a6-90b7-4d53-ad48-57e98033ed2a",
            "parentUUID": "740584f6-5525-4f50-bd15-01190034e105",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "b2be11a6-90b7-4d53-ad48-57e98033ed2a",
            "parentUUID": "740584f6-5525-4f50-bd15-01190034e105",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "740584f6-5525-4f50-bd15-01190034e105",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "bd437b52-6012-4dde-baad-482059a00271",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "is not implemented yet",
      "fullTitle": "Game lifecycle is not implemented yet",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "942e55b3-9eae-4683-afbb-7c36f3df5d5f",
      "parentUUID": "740584f6-5525-4f50-bd15-01190034e105",
      "skipped": false
    },
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "c3154663-105b-4af4-9165-86adbde94319",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "4afdef0b-9b18-4ebe-ac05-7ea4bd395fbb",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "ca320508-ccc0-4673-a109-4f86cea4c901",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "58d5199e-8f98-4d39-a85d-e78e6a0e3041",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "0f751377-28d8-4281-97ca-dc6df1c6a9ed",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "047c2dfe-906c-4a5b-9a24-5fae0fa3109a",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "447dfe5d-099e-4490-b079-ff58966007f4",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "4f80ffab-5b13-4e8d-98fa-a7604de8cb35",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "03fe4343-b2d6-4277-a389-d68f934723d8",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "fa35645f-408d-4218-8187-693707e44c0d",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given a non-existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
            "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 293
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 890,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 890,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 501,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 54,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.2]",
        "test": "[Circular ~.allHooks.2]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.4]",
        "test": "[Circular ~.allHooks.4]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 66
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1181,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 31,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.6]",
        "test": "[Circular ~.allHooks.6]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 66
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1181,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 31,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.8]",
        "test": "[Circular ~.allHooks.8]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 66
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1181,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 31,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.10]",
        "test": "[Circular ~.allHooks.10]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 66
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1181,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 31,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.12]",
        "test": "[Circular ~.allHooks.12]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 66
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1181,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 31,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.14]",
        "test": "[Circular ~.allHooks.14]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
            "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 66
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1211,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1181,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 31,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c869913e-7860-42d4-bc35-c2bb71347fc2",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "71a88ac8-da9f-41bc-95e7-f03bd84f0052",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "8fef039e-11b5-43ad-a5fc-56cbc2416f35",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "09349eda-a4d7-448b-88f2-20585ed20d3a",
                "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "ae464bea-1419-441a-9e5f-e5c09ffa6a1e",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "7d29af2b-845b-4c31-afb0-126e93b401d4",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "3510e216-39c3-476a-b4bd-5cefdde7457a",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "c7fb856b-3417-46d1-a5b7-ebe5e8b0d8ca",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "fabdbfb6-a340-4294-85ea-f7138083ff9f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "dd9acf84-a342-44cc-8af6-653f18eeb19f",
                "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 66
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "d40a949d-97df-4b4d-83f3-2665a37b1ba6",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.16]",
        "test": "[Circular ~.allHooks.16]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1216,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    }
  ],
  "allPending": [
    {
      "title": "is not implemented yet",
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "pending": true,
      "type": "test",
      "file": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
      "parent": {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "b2be11a6-90b7-4d53-ad48-57e98033ed2a",
            "parentUUID": "740584f6-5525-4f50-bd15-01190034e105",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "b2be11a6-90b7-4d53-ad48-57e98033ed2a",
            "parentUUID": "740584f6-5525-4f50-bd15-01190034e105",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "740584f6-5525-4f50-bd15-01190034e105",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {}
    }
  ],
  "allPasses": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "ce905d51-ca17-4df0-b5fa-b1c7772a28a7",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "056fb953-4b58-4925-a83a-a92459e4a5db",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "9a62b62c-2af2-40f4-9643-ce9ae02c6a79",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "d5ec53f6-0ffc-4439-a364-b9233301a7af",
      "parentUUID": "f33cfb98-7257-4de7-8b42-03cc282fcb47",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "100d2883-b97f-413d-9197-4ef94ad73bdf",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "da9d4690-4e36-436c-a947-55f37d584d2e",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "23abc0f1-679c-40e8-9d69-ca75315314e3",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "be82eaad-e85c-4dfe-ae07-f2b77a267148",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "367e22c0-3aaf-4a8f-945c-a03bde70ed51",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "bdc115b1-5cf2-45e0-aa86-aacea4c0a5c8",
      "parentUUID": "9d4ad450-18bd-47a8-b2ce-315b2681077d",
      "skipped": false
    }
  ],
  "allFailures": []
}