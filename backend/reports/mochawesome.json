{
  "reportTitle": "backend",
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2015-12-22T13:40:56.396Z",
    "end": "2015-12-22T13:40:56.778Z",
    "duration": 382,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8fc14fa2-9be2-4f65-83eb-847bfe4640ac",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "f85ad43b-ee37-4389-9b03-fa978bf1846d",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 164,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "e15ea561-a3c0-48c9-a676-b537913a5401",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "6023fc4b-01d6-4f70-9864-0f438acfe770",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "15af9efc-f51f-4ff8-84b8-58bb322cb030",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "44077606-7a07-476c-b812-500b7c1df8f4",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "b3c1c074-74b5-4f36-a659-406b84e3a48d",
      "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given a non-existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 164,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 164,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
            "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 200
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 862,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 862,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 561,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 56,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8fc14fa2-9be2-4f65-83eb-847bfe4640ac",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 925,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8fc14fa2-9be2-4f65-83eb-847bfe4640ac",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.2]",
        "test": "[Circular ~.allHooks.2]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 925,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8fc14fa2-9be2-4f65-83eb-847bfe4640ac",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 925,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8fc14fa2-9be2-4f65-83eb-847bfe4640ac",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.4]",
        "test": "[Circular ~.allHooks.4]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 925,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    },
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
            "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "0296a336-2962-4e5f-b418-45867972462f",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
            "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 29
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if one's try to register the same username",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 893,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 29,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if one's try to register the same username",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 893,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 29,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 879,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 14,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "5411ec8b-29e1-4525-be2e-a23852700525",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "964fcde2-d6e7-4bbc-88aa-2f695783a143",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "a4c0fea7-9ebd-4234-87d1-d670c333664c",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "365e4163-22f2-4302-8fc4-3cd7dd884599",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "d5d0039d-5a81-4580-b037-94b1c286df2d",
                "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 200
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "0296a336-2962-4e5f-b418-45867972462f",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "603053a0-f9a2-48f2-8a7a-dcce23c1a6ad",
                "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8fc14fa2-9be2-4f65-83eb-847bfe4640ac",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.6]",
        "test": "[Circular ~.allHooks.6]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 925,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 12,
      "_error": null
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 164,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "ea5a9272-6055-4c23-8843-836315049bd7",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "4cfbef60-662b-495d-b327-a4f910a41960",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "dd2c3443-a119-4e4e-a481-72a6f5371a66",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "e0baf0d9-64e4-4b8e-bf2e-4c58990c9b29",
      "parentUUID": "5411ec8b-29e1-4525-be2e-a23852700525",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "a340af00-23f0-4dd9-a310-c43c4826930b",
      "parentUUID": "0296a336-2962-4e5f-b418-45867972462f",
      "skipped": false
    }
  ],
  "allFailures": []
}