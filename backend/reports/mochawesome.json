{
  "reportTitle": "backend",
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 10,
    "pending": 1,
    "failures": 0,
    "start": "2016-01-05T19:27:06.131Z",
    "end": "2016-01-05T19:27:06.799Z",
    "duration": 668,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 9.1,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "5a04bf4e-31c9-416d-a5d6-20f52c59dedc",
            "parentUUID": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "5a04bf4e-31c9-416d-a5d6-20f52c59dedc",
            "parentUUID": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "4590d476-4f8d-48bc-b56c-3ee304a551c9",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "is not implemented yet",
      "fullTitle": "Game lifecycle is not implemented yet",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "062dbb25-b676-40be-b875-77101d9f621c",
      "parentUUID": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
      "skipped": false
    },
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 167,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "1152cae6-f121-4840-b729-6bdeeea6607a",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "e882f7d6-ad36-4ba6-8f3a-353c3a8f1062",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "6aeda67f-a88d-4754-b4a9-c77f4b74b905",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "af502b37-3f35-43c7-aaee-f534ce1d38d9",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "d982dfc3-337c-4e96-b0c7-52b07d1bc580",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "6b08c359-7551-4aa5-a8c8-292e169a9716",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "a6b7b62a-619d-49f4-9c26-e15f347d5336",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "7ef421fe-0d5b-4855-960c-2ea6fb187d42",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "58ccee96-2725-4561-bec8-c3342c14bcb6",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "43b60610-3af6-42a6-b3e8-3c35ca1cf00b",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given a non-existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 167,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 167,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
            "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 207
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1168,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1168,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 864,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 54,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.2]",
        "test": "[Circular ~.allHooks.2]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.4]",
        "test": "[Circular ~.allHooks.4]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 80
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1479,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 26,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.6]",
        "test": "[Circular ~.allHooks.6]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 80
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1479,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 26,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.8]",
        "test": "[Circular ~.allHooks.8]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 80
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1479,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 26,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.10]",
        "test": "[Circular ~.allHooks.10]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 80
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1479,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 26,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.12]",
        "test": "[Circular ~.allHooks.12]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 80
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1479,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 26,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.14]",
        "test": "[Circular ~.allHooks.14]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
            "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 80
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1506,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1479,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 26,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c85e7cf0-0c4a-4f01-bb11-87eb2498c9c4",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "1a5eac7b-482f-4f0a-b1fb-ebb3e2eb9526",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c3afdd79-a62d-40b7-9462-713bbe05704c",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "44f634e8-821b-4141-82ac-5434ac3b2dc0",
                "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "69bd8dda-5439-438f-85d6-8de1a3da8cf9",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "0619b469-84b6-4598-848a-d61febd15bee",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "b9a425b5-5608-4667-8b7a-8e7a23649142",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "11810f37-76a2-44b1-9f86-2c5c9a5a1591",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "215af51f-2b7e-46bb-a135-35e5bd6952a8",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "2ab3b9ed-e76c-4ce6-b69a-c1376d993c40",
                "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 80
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "87155416-9f13-41cf-aed5-31dbca834a3c",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.16]",
        "test": "[Circular ~.allHooks.16]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1510,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 11,
      "_error": null
    }
  ],
  "allPending": [
    {
      "title": "is not implemented yet",
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "pending": true,
      "type": "test",
      "file": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
      "parent": {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "5a04bf4e-31c9-416d-a5d6-20f52c59dedc",
            "parentUUID": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "5a04bf4e-31c9-416d-a5d6-20f52c59dedc",
            "parentUUID": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "b56a9b37-d3e5-44a7-9077-2e4fd7f2c9ad",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {}
    }
  ],
  "allPasses": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 167,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "06920383-5b35-4c27-8ec7-6446a1602426",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "6f7e9f88-0faa-446e-9b51-4d5bc1e5e758",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "0e7e99aa-53d3-4c34-82c4-e62b7a17d0d5",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "60fdda2f-965d-4887-a498-d7a116e24572",
      "parentUUID": "9cefd0cf-851a-4f76-b791-4459cea0bf59",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "08bcfbea-16c0-45a1-9b90-0beaeddfdafd",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "6565f1c8-80f8-4871-9013-5566e519bcae",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "647e9dd6-1ff7-4de9-bc52-ca843915451f",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "ccf15379-06aa-4ffc-934e-3d8ccc47f394",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "6483aa64-800a-4416-8c00-10f7cdb8a24f",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "6953308d-15c2-4542-96e9-5053588f1623",
      "parentUUID": "cf965dca-56a2-466f-ba08-63e9321e3e4d",
      "skipped": false
    }
  ],
  "allFailures": []
}