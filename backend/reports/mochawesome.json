{
  "reportTitle": "backend",
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2015-12-20T23:34:23.232Z",
    "end": "2015-12-20T23:34:23.614Z",
    "duration": 382,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "c7456525-e4b6-44b7-941d-76fe82a46ac2",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "2df56566-f408-430a-8c8d-d9cdaa6721a1",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 164,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "c2c761cf-1b57-4384-a858-9fdb6e6fbd60",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "16435d89-7f85-4890-8d16-7061acfc2cca",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "c557ea61-bdb9-49cd-bfd4-123f7379d858",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "9ca12cca-c2e2-43c0-b290-81fb8fc0caab",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "3d3755dc-7e4b-42db-86e1-e1f14ea4cc7f",
      "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given a non-existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 164,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 164,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
            "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 201
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 842,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 842,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 3,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 541,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 57,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "c7456525-e4b6-44b7-941d-76fe82a46ac2",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 907,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 9,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "c7456525-e4b6-44b7-941d-76fe82a46ac2",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.2]",
        "test": "[Circular ~.allHooks.2]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 907,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 9,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "c7456525-e4b6-44b7-941d-76fe82a46ac2",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 907,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 9,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "c7456525-e4b6-44b7-941d-76fe82a46ac2",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.4]",
        "test": "[Circular ~.allHooks.4]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 907,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 9,
      "_error": null
    },
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
            "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
            "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 30
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if one's try to register the same username",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 875,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 30,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if one's try to register the same username",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 875,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 30,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 861,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 14,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "c5b13821-1e5f-40d8-b06f-fa8804a881f1",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "e5c06ff9-567d-4f04-895c-c008dec3ccec",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "52a4e284-dc6d-4906-beda-f332f5f840d3",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "938b3c7c-9aa1-487e-ae4e-fbfdaee20264",
                "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 201
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "288da000-0419-49fa-97f2-9337d8253aad",
                "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "c7456525-e4b6-44b7-941d-76fe82a46ac2",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.6]",
        "test": "[Circular ~.allHooks.6]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 907,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 9,
      "_error": null
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 164,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "3f8b1722-92e0-404d-bff3-2f410e884076",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "f7cf13de-5668-4eed-97db-0b0ba6127368",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "44d1d6bb-7e39-414d-b35f-55c5f6c8ed72",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "fe817cbf-1d39-4849-9aeb-0fd1434fa766",
      "parentUUID": "8169548a-d8cd-4fd5-8f28-dcd6d25ed175",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(endpoint, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "9f1ad29e-6cd2-4ad8-9775-1c54aaeeb097",
      "parentUUID": "cf673e1d-bb59-42d1-a151-984cce2dfea8",
      "skipped": false
    }
  ],
  "allFailures": []
}