{
  "reportTitle": "backend",
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 10,
    "pending": 1,
    "failures": 0,
    "start": "2016-01-06T09:23:48.553Z",
    "end": "2016-01-06T09:23:49.305Z",
    "duration": 752,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 9.1,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "622018d5-1c5a-41c5-9652-303d83f870db",
            "parentUUID": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "622018d5-1c5a-41c5-9652-303d83f870db",
            "parentUUID": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "6c695097-ad09-49c5-af73-6640c846813e",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "is not implemented yet",
      "fullTitle": "Game lifecycle is not implemented yet",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "68cb0fbf-2538-48a5-a4dd-325bfb26538c",
      "parentUUID": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
      "skipped": false
    },
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 190,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "cfca0b11-d697-493c-9325-976410a00b28",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "26f9704c-37d8-4927-b297-8bb2bd58d706",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "ebbff5de-9546-453f-a19a-27aff2e2d975",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "15d6c31b-77fd-4ad9-9e7b-cc3822c1b3eb",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "d28d58f7-a86c-4a5a-bac3-ab1d7b4e3ddc",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "1b623416-d1a1-493e-91b2-8df64beef0d8",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "4ce73321-a0b6-4bb1-b3c9-f7a415cdfa6c",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "87b2a462-60af-4d32-84ec-66a2b3e244ee",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "80f4aef8-f405-4936-9dfe-a5ad08dd28a0",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "4565fff7-917b-48fc-b463-e22cfc6c6557",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given a non-existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 190,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should be able to register that user",
            "fullTitle": "User registration Given a non-existing user it should be able to register that user",
            "timedOut": false,
            "duration": 190,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong username is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          },
          {
            "title": "it should return an error if a no data are transmitted",
            "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
            "isRoot": false,
            "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
            "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 238
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 923,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 5,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a no data are transmitted",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 923,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 5,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 561,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 74,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.2]",
        "test": "[Circular ~.allHooks.2]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.4]",
        "test": "[Circular ~.allHooks.4]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 89
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.5.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1262,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 27,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.6]",
        "test": "[Circular ~.allHooks.6]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 89
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.7.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1262,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 27,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.8]",
        "test": "[Circular ~.allHooks.8]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 89
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1262,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 27,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.10]",
        "test": "[Circular ~.allHooks.10]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 89
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.11.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1262,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 27,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.12]",
        "test": "[Circular ~.allHooks.12]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 89
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.13.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1262,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 27,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.14]",
        "test": "[Circular ~.allHooks.14]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "Given an existing user",
        "suites": [],
        "tests": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [
          {
            "title": "it should return an error if one's try to register the same username",
            "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
            "isRoot": false,
            "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return a valid token when providing the right credentials",
            "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
            "isRoot": false,
            "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no username is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if no password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a non existing user is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          },
          {
            "title": "it should return an error if a wrong password is provided",
            "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
            "isRoot": false,
            "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
            "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 89
      },
      "ctx": {
        "_runnable": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "it should return an error if a wrong password is provided",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
          "parent": {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          },
          "ctx": "[Circular ~.allHooks.15.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1289,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 4,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1262,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 27,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "User registration",
        "suites": [
          {
            "title": "Given a non-existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should be able to register that user",
                "fullTitle": "User registration Given a non-existing user it should be able to register that user",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "4ef80002-e4a5-4c4b-9a77-b86bb679149a",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong username is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong username is provided",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "6759eeb4-c81e-49a8-8713-1c3c9c063440",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given a non-existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "bd835ee1-5cc6-43f1-898b-e7cf3f087d98",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              },
              {
                "title": "it should return an error if a no data are transmitted",
                "fullTitle": "User registration Given a non-existing user it should return an error if a no data are transmitted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
                "isRoot": false,
                "uuid": "dc0fe26b-3265-4d76-94e4-b35a46bf8b1c",
                "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 238
          },
          {
            "title": "Given an existing user",
            "suites": [],
            "tests": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/users.js",
            "uuid": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
            "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
            "passes": [
              {
                "title": "it should return an error if one's try to register the same username",
                "fullTitle": "User registration Given an existing user it should return an error if one's try to register the same username",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
                "isRoot": false,
                "uuid": "c8903722-6351-4050-bea0-95f11c62b79f",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return a valid token when providing the right credentials",
                "fullTitle": "User registration Given an existing user it should return a valid token when providing the right credentials",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
                "isRoot": false,
                "uuid": "9c7bf21d-374c-45f1-99d3-d8c1ef853acc",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no username is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no username is provided",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "57d073b5-e172-4a88-8ade-1dad06f18e81",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if no password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if no password is provided",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "1f6d6034-8598-4749-9982-6c6f7f9d22c5",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a non existing user is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a non existing user is provided",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "4525bc0c-1a83-4475-bf2d-14db78771ac8",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              },
              {
                "title": "it should return an error if a wrong password is provided",
                "fullTitle": "User registration Given an existing user it should return an error if a wrong password is provided",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
                "isRoot": false,
                "uuid": "26482479-2399-4564-9670-ea331c5d44e3",
                "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 89
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/users.js",
        "uuid": "f8189461-0ec3-4d4b-a74f-e78f3d762262",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/users.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.16]",
        "test": "[Circular ~.allHooks.16]"
      },
      "_events": {},
      "_eventsCount": 1,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 1294,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 13,
      "_error": null
    }
  ],
  "allPending": [
    {
      "title": "is not implemented yet",
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "pending": true,
      "type": "test",
      "file": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
      "parent": {
        "title": "Game lifecycle",
        "suites": [],
        "tests": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "622018d5-1c5a-41c5-9652-303d83f870db",
            "parentUUID": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "is not implemented yet",
            "fullTitle": "Game lifecycle is not implemented yet",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "isRoot": false,
            "uuid": "622018d5-1c5a-41c5-9652-303d83f870db",
            "parentUUID": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "/test/games.js",
        "uuid": "9d03b54d-089e-4360-abc7-40b4c6354bf8",
        "fullFile": "/home/travis/build/14Plumes/Hexode/backend/test/games.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 1,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {}
    }
  ],
  "allPasses": [
    {
      "title": "it should be able to register that user",
      "fullTitle": "Given a non-existing user it should be able to register that user",
      "timedOut": false,
      "duration": 190,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">201</span>)<br>                     expect(res.result.id).to.be.ok()<br>                     expect(res.result.token).to.be.ok()<br>                     expect(res.result.username).to.equal(user.username)<br>                     expect(res.result.createdAt).to.be.below(<span class=\"hljs-built_in\">Date</span>.now())<br>                     expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">4</span>)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "9d60139a-cbbd-4b61-afd9-9d7bba97cdf4",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong username is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong username is provided",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { username: <span class=\"hljs-string\">\"KtorZ\"</span> + invalidExt }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username + invalidExt })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "e074121e-fb23-4ec4-9654-f0e7a962fcc5",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given a non-existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, <span class=\"hljs-built_in\">Object</span>.assign({}, user, { password: <span class=\"hljs-string\">\"14\"</span> }))<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">0</span>)<br>                            done()<br>                        }))<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "22b88c9d-6d68-4c3c-bbc4-d4ca84e1d749",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if a no data are transmitted",
      "fullTitle": "Given a non-existing user it should return an error if a no data are transmitted",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(400)<br>                     done()<br>                 })<br>                 .catch(done)",
      "isRoot": false,
      "uuid": "defb6290-3204-4bc2-b1a1-f1eef5cbfce9",
      "parentUUID": "cc914535-9bf4-4a5e-b41c-473dd1c78326",
      "skipped": false
    },
    {
      "title": "it should return an error if one's try to register the same username",
      "fullTitle": "Given an existing user it should return an error if one's try to register the same username",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(REGISTER, user)<br>                 .then(res =&gt; {<br>                     expect(res.code).to.equal(<span class=\"hljs-number\">400</span>)<br>                     <span class=\"hljs-keyword\">return</span> utils.mongo(db =&gt; db.collection(<span class=\"hljs-string\">'users'</span>)<br>                        .count({ username: user.username })<br>                        .then(res =&gt; {<br>                            expect(res).to.equal(<span class=\"hljs-number\">1</span>)<br>                            done()<br>                        }))<br>                 })<br>                .catch(done)",
      "isRoot": false,
      "uuid": "ce69a933-f6d1-4040-bfb8-1f594c3779d3",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return a valid token when providing the right credentials",
      "fullTitle": "Given an existing user it should return a valid token when providing the right credentials",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(res =&gt; {<br>                expect(res.code).to.equal(<span class=\"hljs-number\">200</span>)<br>                expect(res.result.token).to.be.ok()<br>                expect(res.result.token).to.be.a(<span class=\"hljs-string\">'string'</span>)<br>                expect(<span class=\"hljs-built_in\">Object</span>.keys(res.result).length).to.equal(<span class=\"hljs-number\">1</span>)<br>                done()<br>            })<br>            .catch(done)",
      "isRoot": false,
      "uuid": "01f357f6-e6f2-478c-97dc-0d27d639c377",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if no username is provided",
      "fullTitle": "Given an existing user it should return an error if no username is provided",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.match(<span class=\"hljs-regexp\">/^(.*)\\?.*$/</span>)[<span class=\"hljs-number\">1</span>],<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "699e1ee0-1682-4b8f-943e-11aed2fee9b0",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if no password is provided",
      "fullTitle": "Given an existing user it should return an error if no password is provided",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(AUTHENTICATE)<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "f7002974-7e8b-4d7a-abdb-e012a1e96bb9",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if a non existing user is provided",
      "fullTitle": "Given an existing user it should return an error if a non existing user is provided",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                path: AUTHENTICATE.path.replace(user.username, <span class=\"hljs-string\">'qwerty'</span>),<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "b5f4d790-ad76-407a-98e0-e59d996b9fbc",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    },
    {
      "title": "it should return an error if a wrong password is provided",
      "fullTitle": "Given an existing user it should return an error if a wrong password is provided",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done =&gt; {<br>            utils.request(<span class=\"hljs-built_in\">Object</span>.assign(AUTHENTICATE, {<br>                headers: { <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`password=<span class=\"hljs-subst\">${user.password}</span>nope`</span> }<br>            }))<br>            .then(failAuthenticate(done), done)",
      "isRoot": false,
      "uuid": "7a623ac4-8fc3-4fa2-a788-2f686f243554",
      "parentUUID": "bbd11b8c-355b-4c25-93ad-e71acfd61f96",
      "skipped": false
    }
  ],
  "allFailures": []
}